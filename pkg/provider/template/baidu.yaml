version: "0.1"
name: baidu # the name should be aligned with file name
services:
    chat: # service name defined by aog
        url: "https://qianfan.baidubce.com/v2/chat/completions"
        endpoints: [ "POST /v1/chat/completions" ] # request to this will use this flavor
        extra_url: ""
        auth_type: "apikey"
        auth_apply_url: https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Um2wxbaps
        default_model: ernie-3.5-8k
        request_segments: 1 # request
        install_raw_routes: false  # also install routes without aog prefix in url path
        extra_headers: '{}'
        support_models: ["ernie-3.5-8k", ]
        request_to_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "model": $model,
                          "stream": $stream,
                          "messages": messages,
                          "tools": tools,
                          "seed": seed,
                          "temperature": temperature,
                          "top_p": top_p,
                          "top_k": top_k,
                          "stop": stop,
                          "max_tokens": $exists(max_tokens) ? max_tokens : max_completion_tokens,
                          "keep_alive": keep_alive
                      }

                - converter: header
                  config:
                      set:
                          Content-Type: application/json

        request_from_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "model": $model,
                          "stream": $stream,
                          "messages": messages,
                          "tools": tools,
                          "seed": seed,
                          "temperature": temperature,
                          "top_p": top_p,
                          "top_k": top_k,
                          "stop": stop,
                          "max_tokens": max_tokens,
                          "keep_alive": keep_alive
                      }

                - converter: header
                  config:
                      set:
                          Content-Type: application/json

        response_to_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "id": id,
                          "model": model,
                          "created_at": created,
                          "message": choices[0].message,
                          "finished": true,
                          "finish_reason": choices[0].finish_reason
                      }

        stream_response_to_aog:
            conversion:
                - converter: action_if
                  config:
                      trim: true
                      pattern: "[DONE]" # ignore if the content is [DONE]
                      action: drop
                - converter: jsonata
                  config: |
                      {
                          "id": id,
                          "model": model,
                          "created_at": created,
                          "message": choices[0].delta,
                          "finished": choices[0].finish_reason = "stop" ? true : false,
                          "finish_reason": choices[0].finish_reason
                      }

        response_from_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "id": id,
                          "model": model,
                          "object": "chat.completion",
                          "created": created_at,
                          "choices": [{
                                "index": 0,
                                "message": message,
                                "finish_reason": finish_reason
                          }]
                      }

        stream_response_from_aog:
            epilogue: ["[DONE]"] # openai adds a data: [DONE] at the end
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "id": id,
                          "model": model,
                          "object": "chat.completion.chunk",
                          "created": created_at,
                          "choices": [{
                                "index": 0,
                                "delta": message,
                                "finish_reason": finish_reason
                          }]
                      }
    embed:
        url: "https://qianfan.baidubce.com/v2/embeddings"
        endpoints: [ "POST /v1/embeddings" ] # request to this will use this flavor
        extra_url: ""
        auth_type: "apikey"
        auth_apply_url: https://cloud.baidu.com/doc/WENXINWORKSHOP/s/Um2wxbaps
        default_model: embedding-v1
        request_segments: 1 # request
        install_raw_routes: false # also install routes without aog prefix in url path# request to this will use this flavor
        extra_headers: '{}'
        support_models: ["embedding-v1"]
        request_to_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "model": model,
                          "input": input,
                          "dimensions": dimensions,
                          "encoding_format": encoding_format
                      }

                - converter: header
                  config:
                      set:
                          Content-Type: application/json

        request_from_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                         "model": model,
                         "input": input,
                         "dimensions": dimensions,
                         "encoding_format": encoding_format
                      }

                - converter: header
                  config:
                      set:
                          Content-Type: application/json

        response_to_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "id": id,
                          "model": model,
                          "data": data
                      }
        response_from_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                           "id": id,
                           "model": model,
                           "data": data
                      }
    text-to-image:
        url: "https://qianfan.baidubce.com/v2/images/generations"
        endpoints: ["POST /v1/text-to-image"] # request to this will use this flavor
        extra_url: ""
        auth_type: "apikey"
        install_raw_routes: false # also install routes without aog prefix in url path
        default_model: irag-1.0
        request_segments: 1 # request
        extra_headers: '{}'
        support_models: ["irag-1.0"]
        request_to_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                         "model": $model,
                         "prompt": prompt,
                         "refer_image": image,
                         "image_type": image_type,
                         "n":$exists(n) ? n : 1,
                         "size": $exists(size) ? size : "1024x1024"
                      }

                - converter: header
                  config:
                      set:
                          Content-Type: application/json
        request_from_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                         "model": $model,
                         "prompt": prompt,
                         "refer_image": image,
                         "image_type": image_type,
                         "n":$exists(n) ? n : 1,
                         "size": $exists(size) ? size : "1024x1024"
                      }

                - converter: header
                  config:
                      set:
                          Content-Type: application/json
        response_to_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                          "id": id,
                          "created": created,
                           "data": {
                               "url": [$map(data, function($v){$v.url})]
                                   }
                      }
        response_from_aog:
            conversion:
                - converter: jsonata
                  config: |
                      {
                           "id": id,
                           "created": created,
                           "data": {
                               "url": [$map(data, function($v){$v})]
                                   }
                      }